"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Ajv = require("ajv");
const fs = require("fs");
const path = require("path");
const ts = require("typescript");
const util = require("util");
const readFileAsync = util.promisify(fs.readFile);
const typewizConfigSchema = require('./typewiz.json'); // tslint:disable-line:no-var-requires
class ConfigurationParser {
    constructor() {
        this.typewizConfig = {};
    }
    findConfigFile(cwd) {
        return ts.findConfigFile(cwd, ts.sys.fileExists, 'typewiz.json');
    }
    parse(configurationPath) {
        return __awaiter(this, void 0, void 0, function* () {
            let typewizConfigString;
            try {
                typewizConfigString = yield readFileAsync(path.resolve(configurationPath), { encoding: 'utf8' });
                this.configurationPath = path.resolve(configurationPath);
            }
            catch (error) {
                // TODO we should pass this error to caller
                return;
            }
            this.parseConfig(typewizConfigString);
        });
    }
    parseSync(configurationPath) {
        let typewizConfigString;
        try {
            typewizConfigString = fs.readFileSync(path.resolve(configurationPath), { encoding: 'utf8' });
            this.configurationPath = path.resolve(configurationPath);
        }
        catch (error) {
            // TODO we should pass this error to caller
            return;
        }
        this.parseConfig(typewizConfigString);
    }
    getCompilerOptions() {
        const compilerOptions = Object.assign({}, this.typewizConfig.common);
        if (compilerOptions.rootDir && this.configurationPath) {
            compilerOptions.rootDir = path.resolve(path.dirname(this.configurationPath), compilerOptions.rootDir);
        }
        if (compilerOptions.tsConfig && this.configurationPath) {
            compilerOptions.tsConfig = path.resolve(path.dirname(this.configurationPath), compilerOptions.tsConfig);
        }
        return compilerOptions;
    }
    getInstrumentOptions() {
        return Object.assign({}, this.getCompilerOptions(), this.typewizConfig.instrument);
    }
    getApplyTypesOptions() {
        return Object.assign({}, this.getCompilerOptions(), this.typewizConfig.applyTypes);
    }
    parseConfig(typewizConfigString) {
        let typewizConfig;
        try {
            typewizConfig = JSON.parse(typewizConfigString);
        }
        catch (error) {
            throw new Error('Could not parser configuration file: ' + error.message);
        }
        const ajv = new Ajv();
        const valid = ajv.validate(typewizConfigSchema, typewizConfig);
        if (!valid) {
            throw new Error(ajv.errorsText(ajv.errors, { dataVar: 'typewiz.json' }));
        }
        this.typewizConfig = typewizConfig;
    }
}
exports.ConfigurationParser = ConfigurationParser;
//# sourceMappingURL=configuration-parser.js.map